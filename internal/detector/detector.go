package detector

import (
	"encoding/json"
	"fmt"
	"log"
	"net"
	"os"
	"os/exec"
	"runtime"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/google/uuid"
)

const (
	bufferSize      = 128
	sendInterval    = 2 * time.Second
	nodeTimeout     = 8 * time.Second
	cleanupInterval = 5 * time.Second
)

type Message struct {
	ID uuid.UUID `json:"id"`
}

type NodeInfo struct {
	ID       uuid.UUID
	Address  *net.UDPAddr
	LastSeen time.Time
	Status   string
}

type Detector struct {
	id              uuid.UUID                  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç—Ç–æ–π –∫–æ–ø–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	addr            *net.UDPAddr               // –ê–¥—Ä–µ—Å –º—É–ª—å—Ç–∏–∫–∞—Å—Ç-–≥—Ä—É–ø–ø—ã, –∫ –∫–æ—Ç–æ—Ä–æ–π –º—ã –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
	iface           *net.Interface             // –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è multicast
	nodes           map[uuid.UUID]*net.UDPAddr // –°–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö "–∂–∏–≤—ã—Ö" –∫–æ–ø–∏–π —Å –∏—Ö UUID –∏ IP-–∞–¥—Ä–µ—Å–∞–º–∏
	lastSeen        map[uuid.UUID]time.Time    // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–∞–∂–¥–æ–π –∫–æ–ø–∏–∏
	mu              sync.RWMutex               // –ú—å—é—Ç–µ–∫—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ nodes –∏ lastSeen –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä—É—Ç–∏–Ω
	network         string                     // "udp4" –∏–ª–∏ "udp6" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–¥—Ä–µ—Å–∞
	tableUpdateChan chan bool                  // –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
}

func Start(addr string, port int) {
	id, _ := uuid.NewUUID()

	// net.JoinHostPort —Å–æ–µ–¥–∏–Ω—è–µ—Ç IP –∏ –ø–æ—Ä—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –∞–¥—Ä–µ—Å–∞, —É—á–∏—Ç—ã–≤–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ IPv4 –∏ IPv6
	addrStr := net.JoinHostPort(addr, strconv.Itoa(port))

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É UDPAddr
	multicastAddr, err := net.ResolveUDPAddr("udp", addrStr)
	if err != nil {
		log.Printf("Failed to resolve UDP address: %v", err)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º—É–ª—å—Ç–∏–∫–∞—Å—Ç-–∞–¥—Ä–µ—Å
	if !multicastAddr.IP.IsMulticast() {
		log.Printf("Provided address '%s' is not a valid multicast address", multicastAddr)
		return
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ç–µ–≤–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ IP-–∞–¥—Ä–µ—Å–∞
	network := determineNetwork(multicastAddr.IP)

	// –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä
	detector := &Detector{
		id:              id,
		addr:            multicastAddr,
		nodes:           make(map[uuid.UUID]*net.UDPAddr),
		lastSeen:        make(map[uuid.UUID]time.Time),
		network:         network,
		tableUpdateChan: make(chan bool, 100),
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è multicast
	ifi, err := detector.getMulticastInterface()
	if err != nil {
		log.Printf("Failed to find multicast interface: %v", err)
		return
	}

	detector.iface = ifi

	// –î–ª—è IPv6 link-local –∑–∞–¥–∞–µ–º Zone
	if network == "udp6" && ifi != nil {
		detector.addr.Zone = ifi.Name
	}

	log.Printf("Starting detector with %s protocol for address %s", network, multicastAddr)
	log.Printf("Local Node ID: %s", id.String())

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
	detector.initTable()

	var waitGroup sync.WaitGroup
	waitGroup.Add(4)

	go detector.sender(&waitGroup)
	go detector.receiver(&waitGroup)
	go detector.cleaner(&waitGroup)
	go detector.tableUpdater(&waitGroup)

	waitGroup.Wait()
}

// determineNetwork –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–µ—Ç–µ–≤–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ IP-–∞–¥—Ä–µ—Å–∞
func determineNetwork(ip net.IP) string {
	if ip.To4() != nil {
		return "udp4"
	}
	return "udp6"
}

func (detector *Detector) sender(waitGroup *sync.WaitGroup) {
	defer waitGroup.Done()

	// –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ UDP-–ø–∞–∫–µ—Ç–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
	conn, err := net.DialUDP(detector.network, nil, detector.addr)
	if err != nil {
		log.Printf("Failed to start UDP sender to %v: %v", detector.addr, err)
		return
	}
	defer conn.Close()

	jsonMsg, _ := json.Marshal(Message{detector.id})

	for {
		conn.Write(jsonMsg)
		time.Sleep(sendInterval)
	}
}

func (detector *Detector) receiver(waitGroup *sync.WaitGroup) {
	defer waitGroup.Done()

	listener, err := net.ListenMulticastUDP(detector.network, detector.iface, detector.addr)
	if err != nil {
		log.Printf("Failed to start UDP multicast receiver on %v: %v", detector.addr, err)
		return
	}
	defer listener.Close()

	buffer := make([]byte, bufferSize)

	for {
		n, senderAddr, err := listener.ReadFromUDP(buffer)
		if err != nil {
			continue
		}

		var msg Message
		if json.Unmarshal(buffer[:n], &msg) != nil {
			continue
		}

		if msg.ID == detector.id {
			continue
		}

		detector.addOrUpdateNode(msg.ID, senderAddr)
	}
}

// getMulticastInterface –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è multicast
func (detector *Detector) getMulticastInterface() (*net.Interface, error) {
	interfaces, err := net.Interfaces()
	if err != nil {
		return nil, err
	}

	// –ò—â–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç multicast
	for _, ifi := range interfaces {
		if ifi.Flags&net.FlagUp == 0 {
			continue // –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
		}
		if ifi.Flags&net.FlagMulticast == 0 {
			continue // –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç multicast
		}
		if ifi.Flags&net.FlagLoopback != 0 {
			continue // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º loopback
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–¥—Ä–µ—Å
		addrs, err := ifi.Addrs()
		if err != nil {
			continue
		}

		for _, addr := range addrs {
			if ipnet, ok := addr.(*net.IPNet); ok {
				if detector.network == "udp6" && ipnet.IP.To4() == nil && !ipnet.IP.IsLoopback() {
					return &ifi, nil
				}
				if detector.network == "udp4" && ipnet.IP.To4() != nil {
					return &ifi, nil
				}
			}
		}
	}

	return nil, fmt.Errorf("no suitable multicast interface found for %s", detector.network)
}

func (detector *Detector) cleaner(waitGroup *sync.WaitGroup) {
	defer waitGroup.Done()

	for {
		time.Sleep(cleanupInterval)

		detector.mu.Lock()
		hasChanges := false

		for id, lastTime := range detector.lastSeen {
			if time.Since(lastTime) > nodeTimeout {
				delete(detector.nodes, id)
				delete(detector.lastSeen, id)
				hasChanges = true
			}
		}

		detector.mu.Unlock()

		if hasChanges {
			detector.triggerTableUpdate()
		}
	}
}

func (detector *Detector) addOrUpdateNode(id uuid.UUID, addr *net.UDPAddr) {
	detector.mu.Lock()
	defer detector.mu.Unlock()

	_, exists := detector.nodes[id]
	detector.nodes[id] = addr
	detector.lastSeen[id] = time.Now()

	if !exists {
		detector.triggerTableUpdate()
	}
}

func (detector *Detector) triggerTableUpdate() {
	select {
	case detector.tableUpdateChan <- true:
	default:
		// –ö–∞–Ω–∞–ª –∑–∞–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
	}
}

func (detector *Detector) initTable() {
	detector.clearScreen()
	fmt.Println("=== Network Node Detector ===")
	fmt.Printf("Local ID: %s\n", detector.id.String()[:8]+"...")
	fmt.Printf("Network: %s | Address: %s\n", detector.network, detector.addr.String())
	fmt.Println("=" + strings.Repeat("=", 70))
	fmt.Println()
}

func (detector *Detector) tableUpdater(waitGroup *sync.WaitGroup) {
	defer waitGroup.Done()

	// –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Å—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã
	detector.displayTable()

	for range detector.tableUpdateChan {
		detector.displayTable()
	}
}

func (detector *Detector) displayTable() {
	detector.mu.RLock()
	nodes := make([]NodeInfo, 0, len(detector.nodes))

	for id, addr := range detector.nodes {
		lastSeen := detector.lastSeen[id]
		status := "Online"

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		timeSince := time.Since(lastSeen)
		if timeSince > 6*time.Second {
			status = "Warning"
		} else if timeSince > nodeTimeout {
			status = "Offline"
		}

		nodes = append(nodes, NodeInfo{
			ID:       id,
			Address:  addr,
			LastSeen: lastSeen,
			Status:   status,
		})
	}
	detector.mu.RUnlock()

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ IP –∞–¥—Ä–µ—Å—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	sort.Slice(nodes, func(i, j int) bool {
		return nodes[i].Address.String() < nodes[j].Address.String()
	})

	// –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ –æ–±–ª–∞—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã
	detector.moveCursorToTableStart()

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
	fmt.Printf("%-10s %-20s %-25s %-10s %-15s\n",
		"‚Ññ", "Node ID", "IP:Port", "Status", "Last Seen")
	fmt.Println(strings.Repeat("-", 85))

	// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É–∑–ª—ã
	for i, node := range nodes {
		var addrStr string
		if node.Address.IP.To4() == nil {
			addrStr = fmt.Sprintf("[%s]:%d", node.Address.IP.String(), node.Address.Port)
		} else {
			addrStr = fmt.Sprintf("%s:%d", node.Address.IP.String(), node.Address.Port)
		}

		nodeID := node.ID.String()[:8] + "..."
		lastSeenStr := node.LastSeen.Format("15:04:05")

		statusSymbol := "‚óè"
		switch node.Status {
		case "Online":
			statusSymbol = "üü¢"
		case "Warning":
			statusSymbol = "üü°"
		case "Offline":
			statusSymbol = "üî¥"
		}

		fmt.Printf("%-10d %-20s %-25s %-10s %-15s\n",
			i+1, nodeID, addrStr, statusSymbol+" "+node.Status, lastSeenStr)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏—Ç–æ–≥–æ–≤
	fmt.Println(strings.Repeat("-", 85))
	fmt.Printf("Total active nodes: %d", len(nodes))

	// –û—á–∏—â–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤—ã–≤–æ–¥–∞
	detector.clearRemainingLines()

	// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏
	fmt.Printf("\n\nLast updated: %s", time.Now().Format("15:04:05"))
}

func (detector *Detector) clearScreen() {
	var cmd *exec.Cmd
	switch runtime.GOOS {
	case "windows":
		cmd = exec.Command("cmd", "/c", "cls")
	default:
		cmd = exec.Command("clear")
	}
	cmd.Stdout = os.Stdout
	cmd.Run()
}

func (detector *Detector) moveCursorToTableStart() {
	// ANSI –∫–æ–¥—ã –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞ –≤ –Ω–∞—á–∞–ª–æ –æ–±–ª–∞—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã
	// –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –∫ —Å—Ç—Ä–æ–∫–µ 6 (–≥–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞)
	fmt.Print("\033[6;1H")
}

func (detector *Detector) clearRemainingLines() {
	// –û—á–∏—â–∞–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞ –æ—Ç –∫—É—Ä—Å–æ—Ä–∞ –¥–æ –∫–æ–Ω—Ü–∞
	fmt.Print("\033[J")
}
